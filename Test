import os
import time
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

while True:

    # 웹 드라이버 경로
    webdriver_path = "@@@"  # 예: "C:/path/to/chromedriver.exe"

    # 년도 범위 설정
    start_year = int(input("년도 범위의 시작 연도를 입력하세요: "))
    end_year = int(input("년도 범위의 종료 연도를 입력하세요: "))

    # 저장 경로 설정
    desired_path = "@@@"  # 원하는 폴더 생성 경로 설정
    folder_name = "@@@"  # 폴더 이름 설정
    folder_path = os.path.join(desired_path, folder_name)  # 폴더 경로 생성

    # 폴더 생성
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    
    # 작업 디렉토리 변경
    os.chdir(folder_path)

    # 웹 드라이버 실행
    service = Service(webdriver_path)
    driver = webdriver.Chrome(service=service)

    # 웹 페이지로 이동
    driver.get("https://www.webofscience.com/wos/woscc/basic-search")

    # 쿠키 설정 나가기 버튼 클릭
    cookie_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "button.onetrust-close-btn-handler")))
    cookie_button.click()

    # 알림 나가기 버튼 클릭
    try:
        notification_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "button._pendo-close-guide")))
        notification_button.click()
    except TimeoutException:
        pass # 대기 시간이 지나면 TimeoutException이 발생하여 예외 처리하고 넘어갑니다.

    # 검색 키워드 입력
    keyword = input("검색 키워드를 입력하세요: ")
    search_box = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "search-main-box")))
    search_box.send_keys(keyword)

    # 날짜 범위 추가 버튼 클릭
    add_timespan_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "button[data-ta='add-timespan-row']")))
    add_timespan_button.click()

    # 날짜 범위 선택 버튼 클릭
    timespan_dropdown = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//button[@aria-label='출판 날짜']")))
    timespan_dropdown.click()

    # 사용자 지정 버튼 클릭
    custom_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//span[text()='사용자 지정']")))
    custom_button.click()

    # 년도 범위 설정
    start_date_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[data-ta='search-timespan-start-input']")))
    start_date_input.clear()
    start_date_input.send_keys(f"{start_year}-01-01")

    end_date_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[data-ta='search-timespan-end-input']")))
    end_date_input.clear()
    end_date_input.send_keys(f"{end_year}-12-31")

    # 검색 버튼 클릭
    search_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "button[data-ta='run-search']")))
    search_button.click()

    # 값을 가져오기 위해 대기
    record_value = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "span.brand-blue")))

    # 가져온 값을 정제하여 변수에 설정
    end_record = int(record_value.text.replace(',', ''))

    # 반복 변수 초기화
    record_start = 1
    record_end = 1000

    while record_start <= end_record:
        print(f"다운로드 진행 중 - 레코드 범위: {record_start}-{record_end}")

        # 대기 시간 추가
        time.sleep(10)  # 버튼 로드를 위해 충분한 대기 시간

        # 내보내기 버튼 클릭
        export_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//button/span[contains(text(), '내보내기')]")))
        export_button.click()

        # Excel 버튼 클릭
        excel_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//button[@aria-label='Excel']")))
        driver.execute_script("arguments[0].click();", excel_button)

        # 레코드 출처 선택
        source_label = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//span[contains(text(), '레코드 출처:')]")))
        source_label.click()

        # 레코드 범위 설정
        record_start_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='markFrom']")))
        record_start_input.clear()
        record_start_input.send_keys(str(record_start))

        record_end_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='markTo']")))
        record_end_input.clear()
        record_end_input.send_keys(str(record_end))

        # 레코드 콘텐츠 선택 버튼
        record_content_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//button[contains(@aria-label, '저자, 제목, 출처')]")))
        record_content_button.click()

        # 사용자 지정 선택 편집 버튼
        custom_settings_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//span[contains(text(), '편집')]/ancestor::button")))
        custom_settings_button.click()

        # 재설정 버튼
        reset_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "button[data-ta='reset-custom-selection']")))
        reset_button.click()

        # 저자, 제목, 출처 항목 전체 선택
        author_title_source_checkbox = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//span[contains(text(), '저자, 제목, 출처')]")))
        author_title_source_checkbox.click()

        # 초록, 키워드, 주소 항목 전체 선택
        abstract_keywords_address_checkbox = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "//span[contains(text(), '초록, 키워드, 주소')]")))
        abstract_keywords_address_checkbox.click()

        # 선택저장 버튼
        save_selection_button = driver.find_element(By.XPATH, "//button[contains(@class, 'mat-raised-button') and contains(@class, 'mat-primary') and contains(.//span, '선택 저장')]")
        save_selection_button.click()

        # 저장 버튼 클릭
        save_button = driver.find_element(By.XPATH, "//button[contains(@class, 'mat-flat-button') and contains(@class, 'mat-primary') and contains(.//span, '내보내기')]")
        save_button.click()

        # 파일 저장 경로 및 이름 설정
        folder_path = "./"
        file_name = f"{start_year}"

        # 파일 다운로드 대기
        wait_time = 20  # 파일 다운로드에 대한 대략적인 대기 시간 설정
        print(f"{wait_time}초 동안 파일 다운로드를 기다립니다...")
        # 대기 시간 추가
        time.sleep(5)  # 충분한 다운로드 대기 시간

        #driver.implicitly_wait(wait_time)

        # 대기 시간 추가
        time.sleep(5)  # 충분한 다운로드 대기 시간

        # 파일 이동을 위한 경로 및 파일 이름 설정
        downloads_directory = os.path.expanduser("~") + "\\Downloads"  # 다운로드 경로
        downloaded_files = [f for f in os.listdir(downloads_directory) if f.endswith(".xls") or f.endswith(".xlsx")]  # 다운로드된 엑셀 파일 선택

        # 가장 최근에 다운로드된 파일 선택
        downloaded_file = max([os.path.join(downloads_directory, f) for f in downloaded_files], key=os.path.getctime)

        # 파일 이동
        file_path = os.path.join(folder_path, file_name + f"_{record_start}-{record_end}.xls")
        shutil.move(downloaded_file, file_path)

        # 대기 시간 추가
        time.sleep(10)  # 버튼 로드를 위해 충분한 대기 시간

        # 다음 레코드 범위 설정
        record_start += 1000
        record_end += 1000

    print("파일 다운로드가 완료되었습니다.")

    # 년도 범위 재입력 여부 확인
    user_input = input("새로운 년도 범위를 입력하려면 'y'를, 종료하려면 아무 키나 입력하세요: ")
    if user_input.lower() != "y":
        break

driver.quit()
